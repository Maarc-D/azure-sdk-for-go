package graph

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
    "fmt"
    "net/http/httputil"
)

// GuestUserClient is the graph Client
type GuestUserClient struct {
    BaseClient
}
// NewGuestUserClient creates an instance of the GuestUserClient client.
func NewGuestUserClient() GuestUserClient {
    return NewGuestUserClientWithBaseURI(DefaultBaseURI, )
}

// NewGuestUserClientWithBaseURI creates an instance of the GuestUserClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewGuestUserClientWithBaseURI(baseURI string, ) GuestUserClient {
        return GuestUserClient{ NewWithBaseURI(baseURI, )}
    }

// Create create a GuestUser sending an invitation
    // Parameters:
        // invitationContent - the email address of the GuestUser you want to invite, the domain of the mail address
        // must exist on existing Azure AD
func (client GuestUserClient) Create(ctx context.Context, invitationContent InvitationSended) (result Invitation, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/GuestUserClient.Create")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: invitationContent,
         Constraints: []validation.Constraint{	{Target: "invitationContent.InvitedUserEmailAddress", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "invitationContent.InviteRedirectURL", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError("graph.GuestUserClient", "Create", err.Error())
        }

        req, err := client.CreatePreparer(ctx, invitationContent)
    if err != nil {
    err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Create", nil , "Failure preparing request")
    return
    }

        resp, err := client.CreateSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Create", resp, "Failure sending request")
        return
        }

        result, err = client.CreateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Create", resp, "Failure responding to request")
        }

    return
}

    // CreatePreparer prepares the Create request.
    func (client GuestUserClient) CreatePreparer(ctx context.Context, invitationContent InvitationSended) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/invitations"),
autorest.WithJSON(invitationContent))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateSender sends the Create request. The method will close the
    // http.Response Body if it receives an error.
    func (client GuestUserClient) CreateSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // CreateResponder handles the response to the Create request. The method always
    // closes the http.Response Body.
    func (client GuestUserClient) CreateResponder(resp *http.Response) (result Invitation, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete delete a GuestUser
    // Parameters:
        // guestUserID - the unique ID of the Guest User
func (client GuestUserClient) Delete(ctx context.Context, guestUserID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/GuestUserClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, guestUserID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Delete", resp, "Failure responding to request")
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client GuestUserClient) DeletePreparer(ctx context.Context, guestUserID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "guestUserId": autorest.Encode("path",guestUserID),
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/users/{guestUserId}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client GuestUserClient) DeleteSender(req *http.Request) (*http.Response, error) {
	    requestDump, err := httputil.DumpRequest(req, true)
if err != nil {
  fmt.Println(err)
}
fmt.Println(string(requestDump))

            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client GuestUserClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	    responseDump, err := httputil.DumpResponse(resp, true)
if err != nil {
  fmt.Println(err)
}
fmt.Println(string(responseDump))
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get get a GuestUser
    // Parameters:
        // guestUserID - the unique ID of the Guest User
        // selectParameter - list of attribut you want the user return reparated by comma, exemple :
        // displayName,givenName,postalCode
func (client GuestUserClient) Get(ctx context.Context, guestUserID string, selectParameter string) (result GuestUser, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/GuestUserClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, guestUserID, selectParameter)
    if err != nil {
    err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Get", resp, "Failure responding to request")
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client GuestUserClient) GetPreparer(ctx context.Context, guestUserID string, selectParameter string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "guestUserId": autorest.Encode("path",guestUserID),
        }

        queryParameters := map[string]interface{} {
    }
        if len(selectParameter) > 0 {
        queryParameters["$select"] = autorest.Encode("query",selectParameter)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/users/{guestUserId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client GuestUserClient) GetSender(req *http.Request) (*http.Response, error) {
	    requestDump, err := httputil.DumpRequest(req, true)
if err != nil {
  fmt.Println(err)
}
fmt.Println(string(requestDump))
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client GuestUserClient) GetResponder(resp *http.Response) (result GuestUser, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Update update a GuestUser
    // Parameters:
        // guestUserProperties - the GuestUser you want
        // guestUserID - the unique ID of the Guest User
func (client GuestUserClient) Update(ctx context.Context, guestUserProperties GuestUser, guestUserID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/GuestUserClient.Update")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.UpdatePreparer(ctx, guestUserProperties, guestUserID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Update", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Update", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "graph.GuestUserClient", "Update", resp, "Failure responding to request")
        }

    return
}

    // UpdatePreparer prepares the Update request.
    func (client GuestUserClient) UpdatePreparer(ctx context.Context, guestUserProperties GuestUser, guestUserID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "guestUserId": autorest.Encode("path",guestUserID),
        }

            guestUserProperties.CreationType = nil
            guestUserProperties.ExternalUserState = nil
            guestUserProperties.ExternalUserStateChangeDateTime = nil
            guestUserProperties.ImAddresses = nil
            guestUserProperties.LegalAgeGroupClassification = nil
            guestUserProperties.Mail = nil
            guestUserProperties.OnPremisesDistinguishedName = nil
            guestUserProperties.OnPremisesDomainName = nil
            guestUserProperties.OnPremisesLastSyncDateTime = nil
            guestUserProperties.OnPremisesSamAccountName = nil
            guestUserProperties.OnPremisesSecurityIdentifier = nil
            guestUserProperties.OnPremisesSyncEnabled = nil
            guestUserProperties.OnPremisesUserPrincipalName = nil
            guestUserProperties.ProxyAddresses = nil
            guestUserProperties.RefreshTokensValidFromDateTime = nil
            guestUserProperties.SignInSessionsValidFromDateTime = nil
    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/users/{guestUserId}",pathParameters),
autorest.WithJSON(guestUserProperties))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSender sends the Update request. The method will close the
    // http.Response Body if it receives an error.
    func (client GuestUserClient) UpdateSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // UpdateResponder handles the response to the Update request. The method always
    // closes the http.Response Body.
    func (client GuestUserClient) UpdateResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

